2013-7-25
DB:t_rule86 筑豊線の脱出路線を修正

2012-7-31

DB:金山の中央西線側が名古屋市内になっていなかった


2012-4-3
jrfare_f(北海道）.pyがうまくいってない。調査途中
a-eまではうまくいったのを確認したが、
fの修正によっては再修正・確認がありえる。




同名駅は漢字上での話で読みが異なっても同名とはしない

DBをプログラムからどのようにして読み出すか
　　Browfish暗号する
　　リソースファイルの保持
　　その形式は？

sqlite3

 .backup file
    db file create
      sqlite3_backup_init() api used.
      sqlite3_backup_xxx() api used.

 .dump
    sql statementエコーバック
 
 

 .restore file
    .backup file 's restore.と同様以下APIで実現
      sqlite3_backup_init() api used.
      sqlite3_backup_xxx() api used.
 
 

結論
　1- RCには、Dumpして生成された全SQL文をBrowfish暗号格納
　2- RCリード
　3- RC復号
　4- :memory: DBへCreate
　5- DBへRC復号SQL文を実行
　
　1．Dumpツールは？RCへの登録 ちょっとめんどいけど頻度は少ないはずだし手間もどうってことないはず。
　1. 3．鍵は？ CBC 初期ベクトル const変数ハードコード UUIDGEN、
　　UUIDGENの下4ビットのスクランブルの暗号のスクランブル。
　5．APIは？sql3_exec()で一括
　
　Tempファイルを作成が簡単なのだが、拾われる恐れがある。
　
　-> Tempファイル作成にする。
　　作成して :memory: open -> sqlite3_backup_init()でrestoreして tempを削除
　　~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  <--- 決定
　
　理想
　memoryをファイルとして扱えないか？
　メモリイメージをSQLITE側でアタッチできないか？


　uuidgenの256×2バイト
　

----------------
query 一覧
No.	summary			in		out		1/*
1	会社一覧を得る		なし		会社		*
2	都道府県一覧を得る	なし		都道府県	*
3	会社から路線		会社		路線		*
4	都道府県から路線	都道府県	路線		*
5	漢字から駅		駅名-		駅		*
6	ひらがなから駅		かな		駅		*
7	路線から駅		路線		駅		*
8	路線から分岐駅		路線		駅		*
9	都道府県+路線から駅	都道府県,路線	駅		1
10	会社+路線から駅		会社,路線	駅		1
11	駅から路線		駅		路線		*
12	-------		
13	駅から駅の営業キロ、換算キロを得る　駅1, 駅2	営業キロ,換算キロ	1	単一路線
14	駅名+路線から駅コード	駅,路線		駅Id		1


1	select name from t_compnay;
2	select name from t_prefect;
3	select distinct(line ) from lines where company=? order by line; 	'JR東海'
	select n.name, t.company_id from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id join t_company c on c.rowid=t.company_id where c.name='JR東海' group by l.line_id order by n.name;
	select n.name, line_id from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id where company_id=3 group by l.line_id order by n.name;
4	select distinct(line) from lines where prefect=?;			'滋賀県'
	select n.name, l.line_id from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id join t_prefect p on p.rowid=t.prefect_id where p.name='佐賀県' group by l.line_id;
	select n.name, l.line_id from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id where prefect_id=41 group by l.line_id order by n.name;
5	select rowid, name from [t_station] where name like ?:			'北千%';
6	select rowid, name from [t_station] where kana like ?;			'きた%';
7	select station_id, t.name from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id where n.name='小海線' order by sales_km
8	select station_id, t.name from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id where t.jctflg<>0 and n.name='函館線' order by l.sales_km 
9	select station_id, t.name from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id join t_prefect p on p.rowid=t.prefect_id where n.name='小海線' and p.name='長野県' order by sales_km
	select station_id, t.name from t_lines l join t_station t on t.rowid=l.station_id where line_id=90 and prefect_id=5 order by sales_km;
10	select station_id, t.name from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id join t_company c on c.rowid=t.company_id where n.name='東海道線' and c.name='JR東日本' order by sales_km
	select station_id, t.name from t_lines l join t_station t on t.rowid=l.station_id where line_id=90 and company_id=5 order by sales_km;
11	select line from lines where station=?;
	select n.name, l.line_id from t_line n join t_lines l on n.rowid=l.line_id where station_id=508;
12	--------
13	select sales_km, calc_km from t_lines l join t_station t on t.rowid=l.station_id join t_line n on n.rowid=l.line_id where (t.name='追分' or t.name='米沢' )and n.name='奥羽線' order by sales_km desc;
14	select l.station_id from t_lines l join t_station t on l.station_id=t.rowid join t_line n on n.rowid=l.line_id where t.name='大久保' and n.name='中央東線'


select distinct(line ) from lines where company=? order by line; 	'JR東海'
select line FROM lines S1 WHERE EXISTS ( SELECT * FROM  lines S2 WHERE S1.key_1 = S2.key_1 AND S1.key_2 = S2.key_2 AND S1.rowid < S2.rowid)
select line FROM lines S1 WHERE EXISTS ( SELECT * FROM  lines S2 WHERE S1.line = S2.line AND S1.rowid < S2.rowid) where compay='JR西日本'

立川－高尾間の分岐駅(結果は、立川と八王子)一覧
select * from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and jctflg!=0 and 
(sales_km<=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and t.name='高尾') and 
sales_km>=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and t.name='立川')) or
(sales_km>=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and t.name='高尾') and 
sales_km<=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and t.name='立川')) 
↓コードのみ(中央東線line_id=23, 立川=532、高尾=537

select id from t_lines l join t_station t on t.rowid=l.station_id join t_jct j on j.station_id=l.station_id where line_id=23 and jctflg!=0 and 
((sales_km<=(select sales_km from t_lines where line_id=23 and station_id=537) and 
sales_km>=(select sales_km from t_lines where  line_id=23 and station_id=532)) or
(sales_km>=(select sales_km from t_lines where line_id=23 and station_id=537) and 
sales_km<=(select sales_km from t_lines where  line_id=23 and station_id=532))) 
↓もっと実用的に(bind(1, line), bind(2, eki1), bind(3, eki2))

"select t.name from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name=?1 and jctflg!=0 and "
"((sales_km<=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name=?1 and t.name=?2) and "
"sales_km>=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name=?1 and t.name=?3)) or "
"(sales_km>=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name=?1 and t.name=?2) and " 
"sales_km<=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name=?1 and t.name=?3)))"


select id,t.name from t_lines l join t_station t on t.rowid=l.station_id join t_jct j on j.station_id=l.station_id where line_id=93 and jctflg!=0 and 
((sales_km<=(select sales_km from t_lines where line_id=93 and station_id=1996) and 
sales_km>=(select sales_km from t_lines where  line_id=93 and station_id=2050)) or 
(sales_km>=(select sales_km from t_lines where line_id=93 and station_id=1996) and 
sales_km<=(select sales_km from t_lines where  line_id=93 and station_id=2050)))


const char* cmd_sql_linedup = 
"select station_id from t_lines where line_id=?1 and ("
"station_id=?2 OR "
"station_id=?3 OR "
"station_id=?4 OR "
"station_id=?5) order by sales_km";
重複ルートチェックに使用
発駅が分岐駅以外のときのみチェックする（発駅が分岐駅なら着駅が分岐駅であろうと単独駅であろうと分岐駅マップでチェック可能）
毎回分岐駅指定時に分岐駅マップとともに発駅-分岐駅までの区間をこのSQLでチェックする。
?1は発駅-1回目の乗り換え駅までの路線(これが異なればOK-チェック終了）
？2-?3 は発駅-1回目の乗換駅
?4-?5は、チェックする分岐駅-分岐駅
すべて同一路線なので、営業キロでソートし、線が重複していないかチェックする。


"select sales_km, calc_km, spe_route from t_lines where line_id=? and (station_id=? or station_id=?)";
計算キロ算出

spe_routeは現在0固定(Pythonで設定)
cityflgはt_station

2011-7-29

select sales_km, calc_km, cityflg, company_id from t_lines l join t_station t on t.rowid=l.station_id join t_company c on c.rowid=t.company_id where line_id=? and (station_id=? or station_id=?)";


1 運賃
特別料金
3島
地方交通線のみ
特定電車区間
特定私鉄競合区間
特定区間

2 新幹線乗換(新幹線－＞在来線）
乗換駅、乗換路線、乗換可能方向
（戻らなければ無条件でＯＫ）
新幹線駅フラグ
新幹線路線属性
在来線戻り禁止分岐駅フラグ
東京-浜松-天竜峡はNG
東京-浜松-高塚はOK
名古屋-浜松-天竜峡はOK
名古屋-浜松-高塚はNG

東京-静岡-富士はOK
名古屋-三島-富士もOK

t_lines.spe_route bit1 ON にして、addRoute, clrRoute時は、そのまままで、m_stmtJunctionsFromLine, m_stmtStationsFromLineでは、where (spe_route & 2) = 0 の条件を付加。新幹線にない駅で分岐駅は spe_routeのbit1をONにする
--

東京-(新幹線)-名古屋-(中央西)恵那 -(a)
は
正確には、
東京-(新幹線)-名古屋-(東海道線)-金山(中央西)恵那 -(b)
である。
だが、名古屋-(東海道線)-金山間は特例で除外可能

東京-(新幹線)-名古屋-(中央西)恵那  -(a)

->
名古屋で中央西線の乗り換えられるので、(a)指定で操作可能
ただし、名古屋-金山間は途中下車(始発駅含む）できません」の注釈が入る。
この間は、中央西線のspe_routeに途中下車禁止フラグをbit2(where (sproute & 4)=4)をONにする

(a)を(b)で計算
内部データ保存時に(b)に変換？
計算時、特例により振り分け(b)で計算？
いずれにせよ注釈は表示するので後者でも前者でも構わないが、前者のメリットは薄い

(b)指定は、名古屋から戻る際、重複するのでNG
金山までは可能。それ以遠の中央西線の駅ならOKだが、東海道線はNG
東海道線は名古屋から上り方向の駅を表示しないようにすべき
--

addRoute(line_id,
   if 2 <= m_route.size() && line_id is HEIKOU_ZAIRAISEN		関数：SQL 検討
     if HIWORD(m_route.back()) is SHINKANSEN				関数：SQL 検討
        reverse_iterator rit = m_route.rbegin();
        s2 = *rit;     // 浜松
        li = HIWORD(s2)
        s2 = LOWORD(s2)
        ++rit;
        s1 = *rit;     // 新横浜
        if line_id:stationId1-stationId2 is assend(上り?)
          if li:s1-s2 is assend
             ok(thru)
          else
             ng                   return -1
        else // descend(下り)
          if li:s1-s2 is assend
             ng                   return -1
          else
             ok(thru)
     else
        thru
   else
     thru
     
->または、事前に上位の
OnBnClickedButtonSel()のcase 2:路線から分岐駅の表示(SetLineOrStationList(m_curLineId);)でやるか。
(選択できないようにさせる）-> 前者(addRouteではじかせることとする）

Q	新横浜発、天竜川着と指定して、浜松以遠を選択したら？エラーになるべき
-> ならないのでまずい
-> 手当：

東京-山手線-品川-新横浜-小田原-熱海-三島-静岡-浜松
東京-名古屋-金山-恵那
東京-金山-恵那



		新横浜	
東海道新幹線	静岡
東海道線	草薙	

		新横浜	
東海道新幹線	浜松
東海道線	天竜川	NG


函館、五稜郭など



神田や金山の扱い




規則88条
大阪・新大阪－姫路以遠は、大阪から計算する。

規則89条
北新地から尼崎以遠へは大阪から計算する(料金のみ。有効期間は通常通り)


規則86条
都区市内発着

規則87条
山手線内発着


3．会社線通貨連絡運輸

4. 選択乗車（特例運賃計算区間）

5. 大都市発着区間

6. 大都市内発着


3
IGRいわて銀河、青い森鉄道は2線合わせて「IGRいわて銀河・青い森鉄道」と扱う
本当は、
盛岡－二戸－目時：IGRいわて銀河
目時－八戸－青森：青い森鉄道

通過するのに、

新青森	東北線
青森	青い森鉄道
目時	IGRいわて銀河
盛岡	東北線

としなくてよく、

新青森	東北線
青森	IGRいわて銀河・青い森鉄道
盛岡	東北線

とすることができる


select dfare from t_clinfar where cline_id=?1 and ((station_id1=?1 and station_id2=?2) or (station_id1=?2 and station_id2=?1))

create table t_clinfar (
	dfare int,
	station_id1 int,
	station_id2 int
	)


中央林間	つきみ野
中央林間	南町田
中央林間	すずかけ台
中央林間	つくし野
中央林間	長津田

つきみ野	南町田
つきみ野	すずかけ台
つきみ野	つくし野
つきみ野	長津田

すずかけ台	南町田
すずかけ台	すずかけ台
すずかけ台	つくし野
すずかけ台	長津田
:
:

(N-1)*N/2
1	2
1	3
1	4
1	5
2	3
2	4
2	5
3	4
3	5
4	5


1 2
1 3
1 4
2 3
2 4
3 4
東釧路	 	―	 	釧路
新旭川	 	―	 	旭川
白石	 	―	 	札幌
桑園	 	―	 	札幌
沼ノ端	 	―	 	苫小牧
五稜郭	 	―	 	函館
中小国	 	―	 	蟹田
川部	 	―	 	弘前
追分	 	―	 	秋田
羽前千歳	―	 	山形
北山形	 	―	 	山形
安積永盛	―	 	郡山
余目	 	―	 	酒田
宮内	 	―	 	長岡
宝積寺	 	―	 	宇都宮
新前橋	 	―	 	高崎
倉賀野	 	―	 	高崎
東神奈川	 ―	 	横浜
神田	 	―	 	東京
代々木	 	―	 	新宿
塩尻	 	―	 	松本
金山	 	―	 	名古屋
津幡	 	―	 	金沢
越前花堂	 ―	 	福井
近江塩津	 ―	 	敦賀
山科	 	―	 	京都
新大阪	 	―	 	大阪
大阪	 	―	 	新大阪
尼崎	 	―	 	大阪
東岡山	 	―	 	岡山
倉敷	 	―	 	岡山
備中神代	 ―	 	新見
伯耆大山	―	 	米子
宇多津	 	―	 	丸亀
多度津	 	―	 	丸亀
池谷	 	―	 	勝瑞
佐古	 	―	 	徳島
佃	 	―	 	阿波池田
向井原	 	―	 	伊予市
北宇和島	―	 	字和島
※海田市	―	 	広島
横川	 	―	 	広島
幡生	 	―	 	下関
西小倉	 	―	 	小倉
吉塚	 	―	 	博多
久保田	 	―	 	佐賀
城野	 	―	 	小倉
夜明	 	―	 	日田
宇土	 	―	 	熊本
田吉	 	―	 	南宮崎
※三原以遠 ― 広島間新幹線利用の場合を含む

