2013-12-9
-―――――――――――
GIT コミット後のログ
-――――――――――

2014-1-22
  フラグビット23-16がOffにしており、新幹線乗換フラグ(b19-20)がロストしてしまっていた。
  AttrOfStationOnLineLine()修正で対応
  



2014-1-3　コミット

2013-12-20 
Excel修正
	b29ONの定義
	最終カラム(20カラム)に、路線1分岐駅1路線2乗換駅を定義。それぞれ、jctsp_line_id1, jctsp_station_id1, jctsp_line_id2, jctsp_station_id2 となる
	                                                                  上越線　　　　　　浦佐              未定義          宮内
	を上記の順番に'/'で区切り、並べる
	jctsp_line_id2はb31の日田彦山線ケースでのみ使用なので未定義
	
	鹿児島線-西小倉は///だけ入れる
	20カラムが空または、!なら未定義それ以外は、b29をONとする
	
	
DB修正
DBスクリプト修正
	t_jctspcl.type列追加
	b29追加
	b29のt_jcpspclのレコード追加(レコード構造変更修正も含む)

DBのb29:BSRJCTSP_B

alpdb.cpp:
b30:BSRNOTYETの実装
b31:BSRJCTHORD の定義追加
フローと箇条書き仕様書の実装(宮内-長岡廻りと、福岡県廻りの2件の計3件)

2013-12-19 (commit complete)
フラグの定義を大幅に仕様変更
小倉-西小倉回り
宮内-長岡回りの仕様追加と修正

-――――――――――


lflg
31 分岐特例駅		x
30 常に0、1はDB読エラー	o
29 69条区間開始駅	o Query_a69listで使用
28 69条区間開始駅	o 同上 読出では不要
27 新幹線		o 新幹線乗換判定で使用
26 新幹線		o
25 新幹線		o
24 - 
23 会社線		△
22 新幹線内分岐駅	・
21 会社境界駅
20-17 69で使用DB読時は0
16-13 新幹線並行在来ID GetHZLine()で使用(新幹線のみ)DB読み込み時は不要
0-12 station.cflg
add()でセット時は、0x1fffでMaskするため0-12までのみ使用


- 88条
CheckOfRule88j()

(a)
　　　　　新大阪
東海道線　(神戸)
山陽線    XXXX
 :          :

*XXXXは、山陽線、神戸から姫路までの距離以上にあること
新大阪、東海道線、山陽線をチェックすれば、(神戸)は神戸でしかありえない。
|
V
　　　　　大阪
東海道線　(神戸)
山陽線    XXXX
 :          :
に置き換え

(b)
 :
          XXXX
山陽線    (神戸)
東海道線　新大阪

*XXXXは、山陽線、神戸から姫路までの距離以上にあること
新大阪、東海道線、山陽線をチェックすれば、(神戸)は神戸でしかありえない。
|
V
 :
          XXXX
山陽線    (神戸)
東海道線　大阪
に置き換え

(c)
            大阪
(東海道線)  新大阪
山陽新幹線  YYYY
 :
*大阪、新大阪、山陽新幹線をチェックすれば、(東海道線)は自明
YYYYは山陽新幹線に新大阪からの距離が姫路以遠であること
|
v
            新大阪
山陽新幹線  YYYY
に置き換え
ではなく、
            大阪
東海道線    神戸       *1
山陽線      西明石     *1
山陽新幹線  YYYY
に置き換え

*1に追加フラグとして経由表示しないを追加
他に計算除外をフラグも設ける

(d)
 :
?????        YYYY
山陽新幹線   新大阪
(東海道線)   大阪

*大阪、新大阪、山陽新幹線をチェックすれば、(東海道線)は自明
YYYYは山陽新幹線に新大阪からの距離が姫路以遠であること
|
V
 :
?????        YYYY
山陽新幹線   新大阪
ではなく、
            大阪
東海道線    神戸       *1
山陽線      西明石     *1
山陽新幹線  YYYY
に置き換え

*1に追加フラグとして経由表示しないを追加
他に計算除外をフラグも設ける？





- 運賃計算構成


c: show_route() をshow_fare()の中にいれる

showFare:
	checkOfRuleSpecificCoreLine(void); // route_list_raw -> route_list_cooked
	86,87適用の発着表示
	fare_info.calc_fare(route_list_raw);
	fare_info.fare に金額



showFare() の処理要約
	- checkOfRuleSpecificCoreLine() /* 86, 87, 69, 70条 114条適用かチェック */
	- 114条適用されていたら1行目にその場合の運賃額を表示する
	- route_list_cookedが空でないと規則適用と判断し都区市内発着表示を
	     - route_list_cookedに対してcalc_fare()
	- route_list_cookedが空の場合規則非適用と判断し
	     - route_list_rawに対してcalc_fare()
	- fare_infoの運賃を表示
	- 
	- 
	- 
下関-岩国
経由：山陽線
営業キロ： 182.0 km 計算キロ： 182.0 km
運賃：\3,260     \2,600[2割引] \3,260[周割] \6,520[往復] \1,950[4割引]
有効日数：   2日

下関-岩国
経由：山陽線<櫛ヶ浜>岩徳線
営業キロ： 182.0 km 計算キロ： 182.0 km
運賃：\3,260     \2,600[2割引] \3,260[周割] \6,520[往復] \1,950[4割引]
有効日数：   2日

fare_info.calc_fare:
	FARE_INFO::aggregate_fare_info(ite->lineId, station_id1, ite->stationId)) {
		FARE_INFO::CheckSpecficFarePass(line_id, station_id1, station_id2);	// 特別加算区間（同一会社発着)
		FARE_INFO::Fare_company(station_id1, station_id2);			// 会社線
	FARE_INFO::days_ticket(this->sales_km);						// JRのみの営業キロで86,87適用後の距離で計算すべき
	FARE_INFO::SpecficFareLine(routeList.front().stationId, routeList.back().stationId);	// 特例運賃

	* {は、ノード毎 インデント内は各ノードに対していおこなわれる.



route.checkOfRuleSpecificCoreLine:  86、87条、69条判定＆経路算出 showFare()の最初に呼ばれる
	Route::CheckOfRule86(route_list_raw, &exit, &enter, &cityId);
	Route::reRouteRule86j87j(cityId, chk, exit, enter);
		Route::SpecificCoreAreaFirstTransferStationBy(exit.lineId, IDENT1(cityId));
		Route::Retrieve_SpecificCoreStation(IDENT1(cityId));
		Route::SpecificCoreAreaFirstTransferStationBy(enter.lineId, IDENT2(cityId));
		Route::Retrieve_SpecificCoreStation(IDENT2(cityId));
	Route::ReRouteRule70j(route_list_raw, &route_list_cooked)
	Route::reRouteRule69j(route_tmp);			/* 69条適用(route_tmp->route_list_cooked) */
	Route::CheckOfRule87(route_list_raw);
	Route::CheckOfRule88j(&route_list_cooked);
	Route::CheckOfRule114j(route_list_raw, route_list_cooked, rtky & 0x03 | 0x8000);
	Route::reRouteRule86j87j(cityId, 2, exit, enter);
	Route::reRouteRule69j(route_tmp);			/* 69条適用(route_tmp->route_list_cooked) */
	Route::reRouteRule86j87j(cityId, 1, exit, enter);
	Route::reRouteRule69j(route_tmp);			/* 69条適用(route_tmp->route_list_cooked) */
	Route::CheckOfRule88j(&route_list_cooked);
	Route::CheckOfRule114j(route_list_raw, route_list_cooked, chk & 0x03);







----------------------------------------------------------------

// 往復割引 1割引き 端数切り捨て 10190 → 9170

#if 0
利用区間に新下関～博多間を含む場合は、新幹線と在来線とでは運賃が異なります。
この例の場合の運賃計算は次のとおりです。
ゆきは新幹線利用で本州内幹線の運賃を適用し、運算計算キロは1179.3kmで13,440円。
片道1割引で12,090円。かえりは在来線利用で博多～東京間の運賃計算キロは1179.3kmで
「本州3社内の幹線の普通運賃表」を適用した13,440円にJR九州利用分（博多～下関間79km）の
加算額150円を加え、13,590円。片道1割引で12,230円になります。
往復割引運賃は12,090円＋12,230円＝24,320円です。


#endif

// デバック----------------------------------------------------------------

#if 0	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  計算キロ220km～で、都区市内適用されていない場合、114条を試みる？
					Route::CheckOfRule114j(route, route_new, rtky & 0x03 | 0x8000)

	if (1900 < sales_km) {
		Route::CheckOfRule114j(route, route_new, rtky & 0x03 | 0x8000);
	}
	
	長津田-国母の例
	国母は横浜から200㎞以下なので長津田から計算
	国母の先の甲斐住吉は200㎞を越えるので横浜から計算
	長津田-国母は\3890だが、
	横浜-甲斐住吉は\3570なので長津田-国母も3570にするという理屈
	
	米原-新横 横浜市内にされた
	
	海尻-長津田は横浜市内



例えば、大阪市内駅である杉本町駅から、名古屋市内駅である大高駅まで
（阪和、大阪環状、東海道経由220.4km）は、中心駅同士が200km以下（190.4km）だが、
杉本町 - 名古屋間は208.0km、大阪 - 大高間は202.8kmといずれも200km超なので、
乗車券は「杉本町（単駅）⇒名古屋市内」か「大阪市内⇒大高（単駅）」のいずれかとなる。
このような場合、乗客から特に求めがない限り、乗車後の予定変更に対応できるよう、
着駅側に特定都区市内制度が適用される。


#endif	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

----------------------------------------------------------------

rule70
#if 0
		　甲府
中央東線　東京 route_item_1
東海道線　静岡 route_item_2

		　甲府
中央東線　代々木 station_id1
(line_id) 品川 station_id2
東海道線　静岡

	双葉
常磐線　日暮里
東北線　小山

	双葉
常磐線　日暮里
(line_id) 日暮里
東北線　小山

#endif


terminate:

#if 0
0		長津田	
1	横浜線	橋本
2	相模線	茅ヶ崎
3	東海道線 富士 -> delete 茅ヶ崎-富士
	身延線	国母  -> delete(国母-富士)


		長津田	
	横浜線	橋本
	相模線	茅ヶ崎
	東海道線 国府津 <- 
	御殿場線 沼津
	東海道線 富士
	身延線	国母

	東海道線 茅ヶ崎 二宮 国府津
#endif



route.add()

#if 0

o junction
. junction(dont check yet)
g goal
s start
left station1
right station2
(g) 着指定
<g> 着指定／終了駅どちらも可(の筈)
0 正常終了
1 正常終了(最後)(つぎのremoveTailでlast itemの通過マスクをOffしない)
2 正常終了(最後)(つぎのremoveTailでlast itemの通過マスクをOffする)
-1 異常終了

///////////////////////////////////////////////

stationId2 == endStationIdの場合は2とする(但し1の場合もある)
呼び出し側はendStationIdのみが終わりとは限らない(着指定の場合もあるので)


rc == 0
  last_flag = 0
  return 1
rc == 1
  last_flag = 1
  return 0
rc == 2
  last_flag = 0
  return 0
rc < 0
  last_flag = 0
  return -1


removeTail():
  if ((i != 0) || (last_flag == 0)) {
    mask off

alloff: y = alloff / L = last on / x = 途中on
                                                                                    alloff
                                                                             rc
a -----o----o  通常(東京-富士-甲府)                                           0        y        

d -----o----g  通常(東京-富士-<g>国母)                                        0        y        

            g  東京-富士-(g)甲府                                              0        y         
g -----o----o  八王子-甲府-富士-東神奈川
               ※ g == sもテスト時考慮
               八王子-甲府-富士-蒲田

f -----o----s  町田-橋本-茅ヶ崎-東神奈川-町田                                 2        y         
               町田-東神奈川-川崎-立川-八王子-町田
               町田-八王子-立川-川崎-東神奈川-町田

v -----o--s-g  町田-橋本-茅ヶ崎-東神奈川-古淵                                -1       y         start
               町田-東神奈川-川崎-立川-八王子-成瀬
               町田-八王子-立川-川崎-東神奈川-古淵

               inStation(stationId2, startStationId, (nextStationId))
               || 町田-八王子間に古淵があるか？
                  町田-八王子間に町田があるか？にならないようにstartStationId!=stationId2条件判定後
               inStation(startStationId, stationId1, stationId2) 
                  東神奈川-古淵間に町田はあるか?
                  東神奈川-町田間に町田はあるか?にならないようにstartStationId!=stationId2条件判定後


l -----o-g--o  東京-富士-((g)身延)-甲府                                      -1        y        end


p ---g-o----o  八王子-甲府-富士-((g)二宮)-品川                               -1        y        end 
               八王子-甲府-富士-((g)二宮)-有楽町


     g
t ---o------o  茅ヶ崎-(g鶴見)-東京                                           -1        y         end
               茅ヶ崎-(g鶴見)-蒲田


w -----o--g-s  町田-橋本-茅ヶ崎-東神奈川-(g成瀬)-町田                        -1       y         
               町田-東神奈川-川崎-立川-八王子-(g古淵)-町田
               町田-八王子-立川-川崎-東神奈川-(g成瀬)-町田


b -----o----x  八王子-東神奈川-茅ヶ崎-橋本                                    1        L         

            s  八王子-甲府-富士-東神奈川-八王子                               1        L         
j -----o----x  
               ※ g == sもテスト時考慮


            g  
h -----o----x  八王子-東神奈川-茅ヶ崎-(g)橋本                                 1        L         
               八王子-東神奈川-茅ヶ崎-g橋本
               新秋津-新松戸-日暮里-南浦和
               ※着駅は着席指定、事前指定の2種で試すこと

            s
x -----o--g-.  橋本-茅ヶ崎-東神奈川-(g成瀬)-橋本                             -1       L         
               東神奈川-川崎-立川-八王子-(g町田)-東神奈川
               八王子-立川-川崎-東神奈川-(g町田)-八王子


            s  
k -----x----.  八街-佐倉-成田-我孫子-新松戸-西船橋-(佐倉x)-八街              -1        L        


e -----x----g  町田-橋本-茅ヶ崎-東神奈川-(橋本<x>)-(g)片倉                   -1        L         


r -----o-s--x  町田-橋本-茅ヶ崎-東神奈川-(町田)-橋本                         -1        L         


     g
u ---o------x  八王子-甲府-富士-東神奈川-(g橋本)-八王子                      -1        L         end

m -----o-g--x  八王子-東神奈川-茅ヶ崎-(g)海老名-橋本                         -1        L        
               八王子-橋本-茅ヶ崎-東神奈川-(g)町田-橋本

c -----x----.  横浜-東神奈川-橋本-茅ヶ崎-(横浜x)-(東神奈川x)-川崎            -1        x         
               八王子-橋本-茅ヶ崎-東神奈川-(橋本x)-(八王子x)
               渋谷-新宿-御茶ノ水
               府中本町-(南浦和)-新松戸-日暮里-(南浦和x)-高崎
               町田-橋本-茅ヶ崎-東神奈川-(橋本x)-八王子
          

            g  町田-橋本-茅ヶ崎-東神奈川-(橋本x)-<g>八王子                   -1        x         
i -----x----.  



               府中本町-(南浦和)-新松戸-日暮里-(南浦和x)-(g)浦和-大宮        -1        x        end
n ---g-o----x  府中本町-(南浦和)-新松戸-日暮里-(g)西日暮里-大宮
               稲城長沼-府中本町-(南浦和)-新松戸-日暮里-(g)西日暮里-大宮
  ---g-x----.  東川口-西国分寺-立川-拝島-高麗川-大宮-(g)浦和-日暮里
               ※着駅は着席指定、事前指定の2種で試すこと

o -----x-g--.  町田-橋本-茅ヶ崎-東神奈川-(橋本<x>)-(g)片倉-八王子            -1        x        end 


q -----o-s--o  南浦和-武蔵浦和-大宮-上野                                     -1        x        
  ---s-o----o
  ---s-o----x  橋本-茅ヶ崎-川崎-立川-八王子-東神奈川
               (町田-橋本-茅ヶ崎-川崎-立川-八王子-東神奈川)
               (片倉-橋本-茅ヶ崎-川崎-立川-八王子-東神奈川)
               川崎-武蔵小杉-鶴見-(川崎x)-品川
  ※ sは分岐駅以外あり得ない

s -----x-s--.  新秋津-南浦和-東京-立川-府中本町-武蔵浦和/新松戸              -1        x        start

s ---s-x----.  保土ヶ谷-東神奈川-橋本-茅ヶ崎-品川                            -1        x        


end:
endStationId in the last between stationId1 and stationId2

start:
startStationId in the last between stationId1 and stationId2

/////////////////////////////////////////////


分岐駅-同一線内（分岐駅含まない）-分岐駅
分岐駅-同一線内（分岐駅含む）-分岐駅

非分岐駅-同一線内（分岐駅含まない）-分岐駅
非分岐駅-同一線内（分岐駅含む）-分岐駅

非分岐駅-同一線内（分岐駅含まない）-非分岐駅
非分岐駅-同一線内（分岐駅含む）-非分岐駅

分岐駅-同一線内（分岐駅含まない）-非分岐駅
分岐駅-同一線内（分岐駅含む）-非分岐駅

type X 武蔵小杉
type 6 八王子-東神奈川-茅ヶ崎-橋本
type 9 橋本-茅ヶ崎-東神奈川-八王子
type O 橋本-東神奈川-川崎-立川-八王子-橋本
type O 長津田-東神奈川-川崎-立川-八王子-長津田



#endif






#if 0
				大森    川崎-鶴見-東神奈川
	東海道線	東神奈川
	横浜線	八王子
	中央東線	立川	立川-府中本町-武蔵小杉-尻手-川崎
	南武線	川崎		x
	東海道線	茅ヶ崎  x

川崎 鶴見 東神奈川x 横浜 大船 


		長津田	
	横浜線	橋本
	相模線	茅ヶ崎
	東海道線 国府津
	御殿場線 沼津
	東海道線 富士
	身延線	国母


		長津田
	横浜線	東神奈川
	東海道線	川崎
	南武線	立川
	中央東線	八王子
	横浜線	十日市場

 s1!=begin then s1 dup ok

		長津田
	横浜線	八王子
	中央東線	立川
	南武線	川崎
	東海道線	茅ヶ崎
	相模線	橋本<End>

#endif

#if 0
			立川	川崎-尻手-武蔵小杉-府中本町-立川
	南武線	川崎

#endif


todo test

2012-6-27
alps_mfcDlg.cpp
	経路選択中、着駅指定をカレント駅に指定する　　→ L239あたりの処理
			(駅選択中／分岐駅選択中／路線選択中の3状態)
	


	経路重複駅が着駅指定している駅
	経路重複駅による着駅指定変更時の表示

	経路選択中着駅短縮時、経路リストが、結果、0行(あり得る？）、1行、2行のときの表示
	
	経路重複による終了時(RouteEnd()付加による副作用チェック）


	発駅	経路(路線-分岐-路線-着)
	発駅	経路(路線-着)
	
	発駅	経路(路線-分岐-路線-分岐-路線)	「－」
	発駅	経路(路線-分岐-路線-分岐-路線-分岐)	「－」
	発駅	経路(路線-分岐-路線-分岐-路線-着)	「－」
	発駅	経路(路線-分岐)	「－」
	発駅	経路(路線)	「－」
	
	発駅	着駅	路線(路線-分岐-路線-分岐-路線-着)	「－」
	発駅	着駅	路線(路線-分岐-路線--着)	「－」
	:
	:
	:










    発駅消去はなし(アプリ終わらせる）
    終着駅消去はなし(リスト表示時「終着駅指定」ボタンでリストした駅に変更可能とする.

　　着駅はいつでも変更できる。着駅があとから指定され既にとおっているルートの場合、いつまでも到達できなくなる
　　-> 着駅チェックする？（現在経路内に存在するか追っかけるか？）
　　着駅は最初または発駅指定時直後のみ指定可能とする。ルート指定されたら指定禁止とする。

 x   発駅選択 | label
 x   
 x   路線選択 | label
 x   分岐駅選択 | button
 x 　終着駅選択 | button
 x    
 x   "" (運賃計算)



x 終着駅選択で終着駅を選んだ後の動作が未 終着指定後の動作
x 終着駅選択済みでBSボタンでキャンセルの動作が未
x ある程度進んだ状態で、発駅、着駅の変更は？　→できない。やりなおし
x　終着駅の書換え
x 全削除していったた動作
x 長津田―成瀬なんかは？

////////////////////////////////////////////////////////////////////////
# 終了駅は省略可、表題、結果は指定強推奨、経路は可変、先頭にPが付くとOption(ラジオ)ボタン制御
# 
# 表題,結果,開始駅,終了駅,経路…,
ad,完了,東京,,東海道線,富士,身延線,P終着駅,甲府
ad,完了,東京,国母,東海道線,国母,富士,身延線,(着駅)国母



#b
b1/3,Complete,八王子,,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,橋本
b2/3,完了,八王子,橋本,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,(着駅)橋本
b3/3,完了,八王子,,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,P終着駅,橋本


#c
c1,経路が重複しています.,横浜,,東海道線,東神奈川,横浜線,橋本,相模線,茅ヶ崎,東海道線,川崎
c2,経路が重複しています.,八王子,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,八王子
c3,経路が重複しています.,渋谷,,山手線,新宿,中央東線,御茶ノ水
c4,経路が重複しています.,府中本町,,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
c5,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,八王子

#e
e1,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,片倉
e2,経路が重複しています.,町田,片倉,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,(着駅)片倉

#--f
*f1,完了,町田,町田,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,(着駅)町田
f2,完了,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,町田
f3,完了,町田,町田,横浜線,東神奈川,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,(着駅)町田
f4,完了,町田,,横浜線,東神奈川,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,P終着駅,町田
f5,完了,町田,町田,横浜線,八王子,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,(着駅)町田
f6,完了,町田,,横浜線,八王子,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,P終着駅,町田

#--g
g1,完了,東京,甲府,東海道線,富士,身延線,(着駅)甲府
g2,路線を選択してください.,八王子,,中央東線,甲府,身延線,富士,東海道線,東神奈川
g3,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,P終着駅,東神奈川
g4,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,P終着駅,蒲田

#--h
h1,完了,八王子,橋本,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,(着駅)橋本
h2,Complete,八王子,,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,橋本
h3,完了,八王子,,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,P終着駅,橋本
h4,Complete,新秋津,,武蔵野線,新松戸,常磐線,日暮里,東北線,南浦和

#--i
i1,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,八王子
i2,経路が重複しています.,町田,八王子,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,(着駅)八王子
i3,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,八王子

#--j
j1,Complete,八王子,,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,八王子
j2,完了,八王子,八王子,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,(着駅)八王子
j3,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,P終着駅,八王子


#--k
k1,経路が重複しています.,八街,,総武線,佐倉,成田線,成田,成田線(成田-我孫子),我孫子,常磐線,新松戸,武蔵野線,西船橋,総武線,P終着駅,八街
k2,経路が重複しています.,八街,八街,総武線,佐倉,成田線,成田,成田線(成田-我孫子),我孫子,常磐線,新松戸,武蔵野線,西船橋,総武線,(着駅)八街

#--l
l1,経路が重複しています.,東京,国母,東海道線,富士,身延線,甲府
l2,経路が重複しています.,東京,国母,東海道線,富士,身延線,P終着駅,甲府

#--m
m1,経路が重複しています.,八王子,海老名,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,橋本
m2,完了,八王子,,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,P終着駅,橋本
m3,経路が重複しています.,八王子,町田,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,橋本
m4,Complete,八王子,,横浜線,東神奈川,東海道線,茅ヶ崎,相模線,橋本

#--n
n1,経路が重複しています.,府中本町,浦和,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
n2,経路が重複しています.,府中本町,西日暮里,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
n3,経路が重複しています.,稲城長沼,西日暮里,南武線,府中本町,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
n4,経路が重複しています.,東川口,浦和,武蔵野線,西国分寺,中央東線,立川,青梅線,拝島,八高線,高麗川,川越線,大宮,東北線,日暮里
n5,経路が重複しています.,府中本町,,武蔵野線,新松戸,常磐線,日暮里,東北線,P終着駅,与野
n6,経路が重複しています.,府中本町,,武蔵野線,新松戸,常磐線,日暮里,東北線,P終着駅,与野
n7,経路が重複しています.,稲城長沼,,南武線,府中本町,武蔵野線,新松戸,常磐線,日暮里,東北線,P終着駅,与野
n8,経路が重複しています.,東川口,,武蔵野線,西国分寺,中央東線,立川,青梅線,拝島,八高線,高麗川,川越線,大宮,東北線,P終着駅,西日暮里
n9,経路が重複しています.,府中本町,,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
na,経路が重複しています.,府中本町,,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
nb,経路が重複しています.,稲城長沼,,南武線,府中本町,武蔵野線,新松戸,常磐線,日暮里,東北線,大宮
nc,経路が重複しています.,東川口,,武蔵野線,西国分寺,中央東線,立川,青梅線,拝島,八高線,高麗川,川越線,大宮,東北線,日暮里
#--o:-----x-g--.
o1,経路が重複しています.,町田,片倉,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,八王子
o2,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,八王子
#--p:---g-o----o
p1,経路が重複しています.,八王子,二宮,中央東線,甲府,身延線,富士,東海道線,品川
p2,経路が重複しています.,八王子,二宮,中央東線,甲府,身延線,富士,東海道線,P終着駅,有楽町
p3,路線を選択してください.,八王子,,中央東線,甲府,身延線,富士,東海道線,品川
p4,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,P終着駅,有楽町
#--q:-----o-s--o
#--q:---s-o----o
#--q:---s-o----x
q1,経路が重複しています.,南浦和,,武蔵野線,武蔵浦和,東北線(埼京線),大宮,東北線,P終着駅,上野
q2,経路が重複しています.,橋本,,相模線,茅ヶ崎,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,東神奈川
q3,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,東神奈川
q4,経路が重複しています.,片倉,,横浜線,橋本,相模線,茅ヶ崎,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,東神奈川
q5,経路が重複しています.,川崎,,南武線,武蔵小杉,東海道線(西大井経由),鶴見,東海道線,品川
#--r:-----o-s--x
r1,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,橋本
r2,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,橋本
r3,完了,町田,橋本,横浜線,橋本,,,,,,,,,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,(着駅)橋本

#--s:-----x-s--.
#--s:---s-x----.
s1,経路が重複しています.,新秋津,,武蔵野線,南浦和,東北線,東京,中央東線,立川,南武線,府中本町,武蔵野線,武蔵浦和
s2,経路が重複しています.,新秋津,,武蔵野線,南浦和,東北線,東京,中央東線,立川,南武線,府中本町,武蔵野線,新松戸
s3,経路が重複しています.,保土ヶ谷,,東海道線,東神奈川,横浜線,橋本,相模線,茅ヶ崎,東海道線,品川

#--t:   g
#--t:---o------o
t1,経路が重複しています.,茅ヶ崎,鶴見,東海道線,東京
t2,経路が重複しています.,茅ヶ崎,鶴見,東海道線,P終着駅,東京
t3,経路が重複しています.,茅ヶ崎,鶴見,東海道線,P終着駅,蒲田
t4,完了,茅ヶ崎,,東海道線,P終着駅,東京
t5,完了,茅ヶ崎,,東海道線,P終着駅,蒲田

#--u:   g
#--u:---o------x
u1,Complete,八王子,,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,八王子
u2,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,P終着駅,八王子
u3,完了,八王子,八王子,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,(着駅)八王子
u4,経路が重複しています.,八王子,橋本,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,八王子
u5,経路が重複しています.,八王子,橋本,中央東線,甲府,身延線,富士,東海道線,東神奈川,横浜線,P終着駅,八王子

#--v:-----o--s-g
v1,経路が重複しています.,町田,,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,古淵
v2,経路が重複しています.,町田,古淵,横浜線,橋本,,,,,,,,,,,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,(着駅)古淵
v3,経路が重複しています.,町田,,横浜線,東神奈川,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,P終着駅,成瀬
v4,経路が重複しています.,町田,成瀬,横浜線,東神奈川,,,,,,,,,,,,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,P終着駅,(着駅)成瀬
v5,経路が重複しています.,町田,,横浜線,八王子,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,P終着駅,古淵
v6,経路が重複しています.,町田,古淵,横浜線,八王子,,,,,,,,,,,,,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,(着駅)古淵

#--w:-----o--g-s
w1,経路が重複しています.,町田,成瀬,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,町田
w2,経路が重複しています.,町田,古淵,横浜線,東神奈川,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,P終着駅,町田
w3,経路が重複しています.,町田,成瀬,横浜線,八王子,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,P終着駅,町田

#              s
#--x:-----o--g-.
x1,経路が重複しています.,橋本,成瀬,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,橋本
x2,経路が重複しています.,東神奈川,町田,横浜線,東神奈川,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,東神奈川
x3,経路が重複しています.,八王子,町田,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,八王子
x4,経路が重複しています.,八王子,成瀬,横浜線,橋本,相模線,茅ヶ崎,東海道線,東神奈川,横浜線,P終着駅,橋本
x5,経路が重複しています.,八王子,町田,横浜線,東神奈川,東海道線,川崎,南武線,立川,中央東線,八王子,横浜線,P終着駅,東神奈川
x6,経路が重複しています.,八王子,町田,中央東線,立川,南武線,川崎,東海道線,東神奈川,横浜線,P終着駅,八王子

a-d1,完了,東京,甲府,東海道線,富士,身延線,(着駅)甲府
a-d2,路線を選択してください.,八王子,,中央東線,甲府,身延線,富士,東海道線,東神奈川
a-d3,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,P終着駅,東神奈川
a-d4,完了,八王子,,中央東線,甲府,身延線,富士,東海道線,P終着駅,蒲田



////////////////////////////////////////////////////////////////////////
select 
	(select max(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-
	(select min(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)),
	(select max(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-
	(select min(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)),

	abs((select sales_km from t_lines
	where line_id=?1 and  (lflg&(1<<21)!=0) 
	and	sales_km>(select min(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))
	and	sales_km<(select max(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)))-
	(select sales_km from t_lines where line_id=?1 and station_id=?2)),

	abs((select calc_km from t_lines
	where line_id=?1 and  (lflg&(1<<21)!=0) 
	and	sales_km>(select min(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))
	and	sales_km<(select max(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)))-
	(select calc_km from t_lines where line_id=?1 and station_id=?2)),

	((select company_id from t_station where rowid=?2) + (65536 * (select company_id from t_station where rowid=?3))),
	((select 2147483648*(1&(lflg>>23)) from t_lines where line_id=?1) + 
	 (select sflg&8191 from t_station where rowid=?2) + (select sflg&8191 from t_station where rowid=?3) * 65536)

を採用





"select	(select max(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-"
"		(select min(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)),"

"		(select max(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-"
"		(select min(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)),"

"		abs((select sales_km from t_lines where line_id=?1 and (lflg&(1<<21))!=0)-"
"			(select sales_km from t_lines where line_id=?1 and station_id=?2)),"

"		(select max(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-"
"			 (select calc_km from t_lines where line_id=?1 and (lflg&(1<<21))!=0),"

"		((select company_id	from t_station where rowid=?2) + (65536 * (select company_id from t_station where rowid=?3))),"

"		((select 2147483648*(1&(lflg>>23)) from t_lines where line_id=?1) + "
"		 (select sflg&8191 from t_station where rowid=?2) + (select sflg&8191 from t_station where rowid=?3) * 65536)");



select	(select max(sales_km) from t_lines where line_id=5 and (station_id=3167 or station_id=3751))-
	(select min(sales_km) from t_lines where line_id=5 and (station_id=3167 or station_id=3751)),
		
	(select max(calc_km) from t_lines where line_id=5 and (station_id=3167 or station_id=3751))-
	(select min(calc_km) from t_lines where line_id=5 and (station_id=3167 or station_id=3751)),
		
	abs((select sales_km from t_lines where line_id=5 and (lflg&(1<<21))!=0) -
	(select sales_km from t_lines where line_id=5 and station_id=3167)),
	
	abs((select max(calc_km) from t_lines where line_id=5 and (station_id=3167 or station_id=3751))-
	(select calc_km from t_lines where line_id=5 and (lflg&(1<<21))!=0)),
	
	((select company_id from t_station where rowid=3167) + (65536 * (select company_id from t_station where rowid=3751))),
	
	((select 2147483648*(1&(lflg>>23)) from t_lines where line_id=5) + 
	 (select sflg&8191 from t_station where rowid=3167) + (select sflg&8191 from t_station where rowid=3751) * 65536)


"select	(select max(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-"
"	(select min(sales_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)),"
"	(select max(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3))-"
"	(select min(calc_km) from t_lines where line_id=?1 and (station_id=?2 or station_id=?3)),"
"	case when (1 < (select count(*) from t_lines where line_id=?1 and (lflg&(1<<21)!=0))) then -1 else "
"	abs((select sales_km from t_lines where line_id=?1 and (lflg&(1<<21))!=0)-"
"	 (select sales_km from t_lines where line_id=?1 and station_id=?2)) end,"
"	case when (1 < (select count(*) from t_lines where line_id=?1 and (lflg&(1<<21)!=0))) then -1 else "
"	abs((select calc_km  from t_lines where line_id=?1 and (lflg&(1<<21))!=0)-"
"	 (select calc_km from t_lines where line_id=?1 and station_id=?2)) end,"
"	((select company_id	from t_station where rowid=?2) + (65536 * (select company_id from t_station where rowid=?3))),"
"	((select 2147483648*(1&(lflg>>23)) from t_lines where line_id=?1) + "
"	 (select sflg&8191 from t_station where rowid=?2) + (select sflg&8191 from t_station where rowid=?3) * 65536)"


     2      3x      y　　　　　　　-> 0
  
     3      2x      y              -> 0

     2       x          3y         -> 0
 
     3       x          2y         -> 0
 
 x : kokura
 y : hakata
 
山陽新幹線は本州扱いなので、1<<21フラグはどの駅も不要にすべき-> しない。
小倉で乗車して博多へ向かった場合は？（その逆も）

    3     2x       -> 0
    2     3x       -> 0
    3x     2       -> 0
    2x     3       -> 0
    
    x: nakaokuni



    3     2x       -> 0
    2     3x       -> 0
    
    3     x   2    -> 2-x
    2     x   3    -> x-2
    
    3x     2       -> 0
    2x     3       -> 0
   
    x: kojima

(sales_km <  )



abs 2 - x


単独会社は除外されるので考慮不要（JR北と東は不要)

考慮パターン
?2    ?3
博多-広島	(a)
小倉-広島	(a)
広島-博多	(a)
広島-小倉	(a)
博多-小倉	(a)
小倉-博多	(a)

宇多津-児島*	(a)
宇多津-茶屋町
茶屋町-宇多津	
茶屋町-児島*	(a)
児島*-茶屋町	(a)
児島*-宇多津	(a)

中小国-木古内	(a)

*: lflg&(1<<21)!=0

※山陽線 下関、門司は四国の例と同一なので省略


?2 or ?3 が(lflg&(1<<21)!=0)なら単一としてよい。-(a)









博多-広島	(a)
小倉-広島	(a)
広島-博多	(a)
広島-小倉	(a)
博多-小倉	(a)
小倉-博多	(a)

宇多津-児島*	(a)
宇多津-茶屋町
茶屋町-宇多津	
茶屋町-児島*	(a)
児島*-茶屋町	(a)
児島*-宇多津	(a)

中小国-木古内	(a)







////////////////////////////////////////////////////////////////////////
member
    int  m_moSel;    // 0= nothing 
                        // bit0: 1=路線から分岐駅リスト表示、分岐駅選択 0: 駅の乗り換え路線一覧表示 路線選択
                        // bit1: 1=開始駅指定有無
                        // bit2: 1=終了駅指定有無
                        // bit3: 1=route 選択終了
    int  m_startStationId;
    int  m_curStationId 初期値 0
    int  m_curLineId;
del(不要)   bool m_bTerminalSel  // 分岐駅リストで全駅リストするか？(ボタンクリックしたか)(着駅未指定時/指定時関わらず)
    int m_terminalId  初期値 0
    int m_moSelOpt  // 1=分岐駅／2=全駅リスト


InitDialog
    IDC_EDIT_STAT 発駅選択してください
    CALC disable
    m_moSel = 0
    IDC_LIST_LINESTATIONS disable
    IDC_BUTTON_BS disable
　　IDC_STATIC_LIST_SEL text = ""
    IDC_RADIO_BRANCH_SEL Visible False
    IDC_RADIO_TERMINAL_SEL Visible Fals
    IDC_LIST_ROUTE_LINE disable    ずっとDisableのまんま(選択することはないので)
    IDC_LIST_ROUTE_BRANCH disable  
    m_startStationId = 0
    m_moSelOpt = 0

発駅駅選択(IDC_BUTTON_STARTSEL) Dlg IDOK
    if 0 < IDC_LIST_ROUTE_LINE count
       msg ルート選択中ですがすべてキャンセルしてもよろしいですか？(y/n)
       if no then return
    IDC_RADIO_BRANCH_SEL Visible False
    IDC_RADIO_TERMINAL_SEL Visible False
    m_startStationId = m_curStationId = dlg.getStationId();
    IDC_EDIT_START text = dlg.getStationName()
    IDC_LIST_ROUTE_LINE clear
    IDC_LIST_ROUTE_BRANCH clear
    IDC_BUTTON_BS disable
    RouteDupChk::route.clear();
    RouteDupChk::addRoute stationId;
    IDC_EDIT_STAT 路線を選択してください.
    m_curLineId = 0
    m_moSelOpt = 0
    IDC_LIST_LINESTATIONS enable
    m_moSel &= ~0x04;
    m_moSel |= 0x02;
    ListView update(m_curStationId); //駅の所属路線       リスト：路線表示
　　IDC_STATIC_LIST_SEL text = "路線選択"

着駅指定(IDC_BUTTON_ENDSEL) Dlg IDOK
    if 0 < IDC_LIST_ROUTE_LINE count
       assert(false)
       return
    IDC_RADIO_BRANCH_SEL Visible False
    IDC_RADIO_TERMINAL_SEL Visible False
    m_terminalId = dlg.id
    IDC_EDIT_END text = dlg.getStationName();
    m_moSel |= 0x04;


<< button or ListCtrl Double click
    return if sel_index nothing
    switch m_moSel & 0x0b
    case 3
        // retrive from station list                駅リスト表示で駅を選択
        // 選ばれているのは駅
        rc = RouteDupChk::addRoute m_curLineId, m_curStationId, sel_index.data
        if rc < 0  重複ルート
            RouteDupChk::clrRoute m_curLineId, m_curStationId, sel_index.data
            return;
        when rc == 1 
        　　if sel_index.data != m_terminalId    着駅指定済みで重複駅が着駅 or 着駅指定で着駅ならOK
                if yes != 片道ルートが終了しました. 着駅に指定しますか？
                   Route::clrRoute m_curLineId, m_curStationId, sel_index.data
                   return
                else
                   m_terminalId = sel_index.data
                   m_curStationId = sel_index.data
                   IDC_EDIT_END text = sel_index.text
                   m_moSel |= 0x04
            IDC_BUTTON_CALC enable
            IDC_RADIO_BRANCH_SEL Visible False
            IDC_RADIO_TERMINAL_SEL Visible False
            IDC_STATIC_LIST_SEL text ""
            m_curStationId = sel_index.data;     // 駅ID 指定終了 m_curStationId == m_terminalId
            m_moSel &= ~0x01;
            m_moSel |= 0x08;
            IDC_LIST_LINESTATIONS disable
            IDC_EDIT_STAT 準備完了. [計算]-料金・キロ算出 [DEL]-経路変更
            return
        
        when rc == 0 route OK
                if m_terminalId == sel_index.data || m_moSelOpt == 2  終着駅選択
                    if m_terminalId != sel_index.data 
                       if no == 終着駅を変更しますか？
                          Route::clrRoute m_curLineId, m_curStationId, sel_index.data
                          return

                    m_terminalId == sel_index.data
　　　　　　　　　　m_curStationgId = sel_index.data
                    m_moSel &= ~0x01;
                    m_moSel |= 0x08;
                    IDC_BUTTON_CALC enable
                    IDC_RADIO_BRANCH_SEL Visible False
                    IDC_RADIO_TERMINAL_SEL Visible False
                    IDC_STATIC_LIST_SEL text ""
                    IDC_LIST_LINESTATIONS disable
                    IDC_EDIT_STAT 準備完了. [計算]-料金・キロ算出 [DEL]-経路変更
                    return
                
                IDC_RADIO_BRANCH_SEL Visible False
                IDC_RADIO_TERMINAL_SEL Visible False
                m_curStationId = sel_index.data;     // 駅ID
                m_moSel &= ~0x01
                IDC_LIST_ROUTE_BRANCH add to sel_index.text     右のリストに分岐駅を指定追加
                IDC_STATIC_LIST_SEL text "路線選択"
                ListView update(m_curStationId) : 駅から路線
                return
        else
            assert(false)
            return; // 選択前、選択完了
    case 2
        // retrieve from line list                   路線リスト表示で路線を選択
        // 選ばれているのは路線
        IDC_LIST_ROUTE_LINE add to sel_index.text       左のリストに路線を追加
        IDC_BUTTON_ENDSEL disable 着駅指定禁止
        IDC_BUTTON_BS enable                                
        IDC_RADIO_BRANCH_SEL Visible True		終着駅指定していても終着駅選択すれば書換え
        IDC_RADIO_BRANCH_SEL Value True
        IDC_RADIO_TERMINAL_SEL Visible True
        IDC_RADIO_TERMINAL_SEL Value False
        m_moSelOpt = 1	// 1=branch, 2=all station
        IDC_STATIC_LIST_SEL text "駅選択"
        m_curLineId = sel_index.data          // 路線ID
        m_moSel |= 0x01;                // 最終指定は路線
        ListView update(m_curLineId) : 路線から分岐駅
    default
        assert(false)
        return; // 選択前、選択完了
        

IDC_RADIO_BRANCH_SEL or IDC_RADIO_TERMINAL_SEL pushd
    switch m_moSel & 0x0b
    case 2	// 路線リスト表示中
        assert(false);
        break
    case 3	// 駅リスト表示中
        assert(((m_moSel & 0x04) && (0 < m_terminalId)) || ((m_moSel & 0x04) == 0) && (m_terminalId == 0))
        if IDC_RADIO_BRANCH_SEL Value is True
           if m_moSelOpt != 1
              ListView update(m_curLineId)
              m_moSelOpt = 1
        else
           if m_moSelOpt != 2
              ListView update(m_curLineId, true)
              m_moSelOpt = 2
    default
        assert(false);
    }

IDC_BUTTON_CALC pushed
    // todo here


bs(del) button pushed
    if m_moSel & 0x08 != 0
        m_moSel &= ~0x09
        // failthru
        
    switch m_moSel & 0x03
    case 3		駅リスト表示中
	m_moSel &= ~0x01
        ListView update(m_curStationId) : 駅から路線
	remove IDC_LIST_ROUTE_LINE tail id
        if IDC_LIST_ROUTE_LINE count is 0
            IDC_BUTTON_BS disable 
            m_curLineId = 0;
            IDC_BUTTON_ENDSEL enable 着駅指定有効
        else
            m_curLineId = IDC_LIST_ROUTE_LINE tail id
        IDC_RADIO_BRANCH_SEL Visible False
        IDC_RADIO_TERMINAL_SEL Visible False
        IDC_STATIC_LIST_SEL text "路線選択"

    case 2		路線リスト表示中
        if ! IDC_LIST_ROUTE_BRANCH tail id
            assert(false)			ルートにひとつもない
            return
        assert(m_curStationId == IDC_LIST_ROUTE_BRANCH tail id)
        IDC_LIST_ROUTE_BRANCH tail id remove	最後の分岐駅を削除
        if ! IDC_LIST_ROUTE_BRANCH tail id
            delStartStationId = m_startStationId	ルートリスト＝1つの場合、2個前は発駅
        else
            delStartStationId = IDC_LIST_ROUTE_BRANCH tail id	ルートリスト2つ以上
        RouteDupChk::clrRoute m_curLineId, delStartStationId, m_curStationId
        m_curStationId = delStartStationId

        IDC_RADIO_BRANCH_SEL Visible True
        IDC_RADIO_BRANCH_SEL Value True
        IDC_RADIO_TERMINAL_SEL Visible True
        IDC_RADIO_TERMINAL_SEL Value False
        IDC_STATIC_LIST_SEL text "駅選択"
        m_moSel |= 0x01;                     // 最終指定は路線
        ListView update(m_curLineId) : 路線から分岐駅
    else
        assert(false)
        return; // 選択前、選択完了


// m_moSel & 1 == 1:
//      idは路線Id	路線分岐駅
//      terminal_sel false
//
// m_moSel & 1 == 1:
//      idは駅Id　　　  駅の路線リスト

ListView update(id, terminal_sel = false)
    switch m_moSel & 0x0b
    case 3		// 駅リスト表示
        if terminal_sel
            路線(id)から駅, m_curStationIdは除外、m_terminalIdは路線リストの先頭に"(着駅)"と表示
        else
            路線(id)から分岐駅 or m_curStationIdは除外、m_terminalIdは路線リストの先頭に"(着駅)"と表示
    case 2		// 路線リスト表示
        駅(id)の所属路線をリスト m_curLineIdは除外
    default
        assert(false)
        return; // 選択前、選択完了
    
---------------------------------------
終着駅指定のチェックボックスの制御
        起動時禁止
        路線リスト表示時禁止
        
        
        

            高尾
中央東線    立川    高尾-立川間の分岐(立川,八王子)=select * from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and jctflg!=0 and sales_km<=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and t.name='高尾') and sales_km>=(select sales_km from t_lines l join t_line n on n.rowid=l.line_id join t_station t on t.rowid=l.station_id where n.name='中央東線' and t.name='立川');
南武線      川崎
東海道線    東神奈川
横浜線      八王子  <- X
八高線      高崎


八王子選択
路線選択：横浜線、八高線、中央東線
八高線選択
高崎(終着駅)、拝島、高麗川


	新宿	中央東、山手
中央東	八王子	八高線、横浜線

///////////////////////////////////////////////////////////////////////
            高尾	中央東線
中央東線    立川	中央東線、南武線、青梅線
南武線      川崎	南武線、東海道線、鶴見線
東海道線    東神奈川	東海道線、横浜線
横浜線      八王子	横浜線、中央東線、八高線
八高線      高崎	八高線、上越線、信越線、上越新幹線、北陸新幹線





addroute
  重複ポイントで抜ける（含まない）戻り値は重複ポイントの分岐番号
  
  
  重複なしの戻り値は０
  最後の駅の重複の場合、―１
  致命的エラー   －２
  線区が直前と同様 －３
 
  



*****************************************************************************
12 分岐駅=1 (jctflg)
22 新幹線で新幹線の駅の無い在来線分岐駅(Route MASK以外は除外)
23 JR以外=1
24 70条定義レコード用レコード(*通常除外-line_idが独自なのでline_id指定したqueryなら指定しなくてOK)
31 分岐駅特例(江差線の函館、札沼線の札幌、石北線の旭川(*通常除外)
****************************************************************************

(lflg & (1 << 23))!=0


sales_km>=0 新幹線中間分岐駅を除外


0=(lflg & ((1 << 24)|(1 << 31))


select id,t.name from t_lines l join t_station t on t.rowid=l.station_id join t_jct j on j.station_id=l.station_id where line_id=93 and jctflg!=0 and 
((sales_km<=(select sales_km from t_lines where line_id=93 and station_id=1996) and 
sales_km>=(select sales_km from t_lines where  line_id=93 and station_id=2050)) or 
(sales_km>=(select sales_km from t_lines where line_id=93 and station_id=1996) and 
sales_km<=(select sales_km from t_lines where  line_id=93 and station_id=2050)))






	CDBContext ctx = Route::enum_xxxx()
	ctx.bind(1, "hello");
	ctx.bind(2, 343);
	while(ctx.moveNext()) {
	  ctx.getText(1);
	  ctx.getInt(1);
	}

	or

	CDBContext* pctx = CDB::getInstance()->prepare(Fjr::sql_enum_company_prefect));
	pctx->bind(1, "hello");
	pctx->bind(2, 343);
	while(pctx->moveNext()) {
	  pctx->getText(1);
	  pctx->getInt(1);
	}
	delete pctx;

MainUI class members

Member(in Route member)
  m_route.startStationId
  m_route.endStationId

m_curStationId
m_curLineId
SelMode (station|line)
--

MainUI class::Init method
 Initialize valiables
Sel begin Station
  BeginStaionId, curStationId set
  SelMode =linelist
  List line show




MainUI class::
// 発駅指定
//	IDC_BUTTON_STARTSEL [...] button pushed
//

MainUI class::
// 着駅指定
//	IDC_BUTTON_ENDSEL [...] button pushed.
//

MainUI class::
// 「路線」／「分岐駅」／「着駅」の選択
//	IDC_BUTTON_SEL [+] button pushed.
//
  If selmode == linelist
     line List append sel line
     Selmode = station list
     Radio select enable as jct
     Show list station line, curStation
  Else
     Addroute line, curStation,sel station
     If ng
         Error message
          Return              
     Elseif last or terminal or radio select by terminal
         RouteEnd()     
         Jct List append station 
         Farecalc
     Else
         Sel mode = line
         curStation = sel station
         Show list line - line, curStation    
          Jct List append station
          Farecalc
          If Station is Terminal or  radio select is terminal
              Routeend

MainUI class::
//	List double click
//	IDC_LIST_LINESTATIONS [(路線／分岐駅／着駅)] ListCtrl Double clicked.
//
-> IDC_BUTTON_SEL [+] button pushed.


MainUI class::
//	分岐駅選択 Radio Button
//	IDC_RADIO_BRANCH_SEL [分岐駅] Radio Button pushed.
//
   Assert selMode == station
   Assert line list count > 0
   If radio is terminal
      Show list all station:last line list
   Else
      Show list jct station:last line list

MainUI class::
//	終着駅指定 Radio button
//	IDC_RADIO_STATION_SEL [着駅] Radio Button pushed.
//
-> IDC_RADIO_BRANCH_SEL [分岐駅] Radio Button pushed.



MainUI class::
//	発駅、着駅、経路 => 全消去
//	IDC_BUTTON_ALL_CLEAR [X] Button pushed.
//

	m_route.clrRoute();
	m_selMode = SEL_LINE;

MainUI class::
//	着駅クリア
//	IDC_BUTTON_TERM_CLEAR [X] button pushed.
//
  textfield.Terminal = ""
  
  x GetWindowLong()->GWL_USERDATA にstationIdを含められないか？

MainUI class::
// delete button(経路の末尾をキャンセル)
//	IDC_BUTTON_BS [-] button pushed.
//
   If SelMode == line
      If curStation == beginStation
          Assert list count 0
          Return
      SelMode = station
      route.removeTail()
      Jct List  remove tail
      Jct List new tail -> curStation
      Show list to jct station by line and excet curStation
       Radio select as jct
      
    Else. // station sel
       SelMode = line
       Line List  remove tail
       Show list to line by curStation


MainUI class::routeEnd()
//	着駅までの指定完了
//
  [路線/分岐駅/着駅]リストを消してタイトル消去して追加[+]ボタン無効化


----------------------
2013-12-4

大宮 上越新幹線 長岡 信越線(篠ノ井-新潟) 直江津
直江津 信越線(篠ノ井-新潟) 長岡 上越新幹線 大宮
経路エラーとなってしまう（宮内が新幹線内分岐駅としてひっかかる)。


博多 山陽新幹線 小倉 日田彦山線 田川後藤寺
博多 山陽新幹線 小倉 鹿児島線 西小倉 日豊線 城野 日田彦山線 田川後藤寺
前者は指定可能だが、後者は指定不可(小倉-西小倉で新幹線乗換逆走による重複エラー)
前者は後者に変換されるが、後者はReverseすると、小倉-博多で重複エラーとなる。
これは、どーするか？？？？


--- 2013-11-24
鹿児島線 小倉は新幹線乗換フラグ0x10
信越線 長岡は、0x12だったのを今0x13にしてみてる
分岐駅に宮内は含まれている

小倉の並行在来線名を鹿児島線に変えた
->エラーがadd()の前段で実施しているCheckTransferShinkansen()で起きるようになる。

西小倉と吉塚は、分岐駅から外している（折尾や香椎は含まれている）

-――
西小倉



