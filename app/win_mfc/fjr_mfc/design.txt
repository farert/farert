
大都市近郊区間


-------<<< 運賃計算処理概要 >>>>-------
FARE_INFO fare_info = calcFare()   // from APP Interface.
                                   // 全ての必要な情報みんなFARE_INFOに格納されてくる
                                   /* 86, 87, 69, 70条 114条適用かチェック */
{
 /* no_rule flag により以下をやるか否か */
 rule114 = checkOfRuleSpecificCoreLine();	// route_list_raw -> route_list_cooked

 fare_info.calc_fare(&last_flag, route_list_raw, route_list_cooked);
   fare_info.aggregate_fare_info()
   fare_info.CheckIsJRTokai() JR東海のみ?
   adjust_km = FARE_INFO::CheckAndApplyRule43_2j(routeList_cooked);
   fare_info.retr_fare() 運賃計算を適用。フラグ見て、fare_infoのfareにセットする

 return fare_info;
}
-------

株主優待適用条件

calc_fare()
 aggregate_fare_inf(), CheckIsJRTokai()の呼び出し後、

		TRACE("@@@:isNotCityterminalWoTokai()=%d, isCityterminalWoTokai()=%d, %d\n", isNotCityterminalWoTokai(), isCityterminalWoTokai(), *last_flag & LF_TER_CITY_MASK);
		TRACE("@@@ en=%d, aply=%d rule=%d norule=%d\n", BIT_CHK(*last_flag, BLF_JRTOKAISTOCK_ENABLE),
			BIT_CHK(*last_flag, BLF_JRTOKAISTOCK_APPLIED),
			BIT_CHK(*last_flag, BLF_NO_RULE), BIT_CHK(*last_flag, BLF_RULE_EN));

 品川　東海道新幹線　熱海		1 0 0  		1 0 0 0
 品川　東海道新幹線 名古屋  	0 1 24576 	1 0 0 1	特例適用中		提S
							1 0 0		0 0 1 0 特例非適用		*
							1 0 16384	1 1 0 0 株主優待適用	S*
 品川 東海道新幹線　三河安城 	0 1 8192	1 0 0 1                提S
							1 0 0		0 0 1 0               *
							1 0 0		1 1 0 0               S*
 品川 東海道新幹線　三島		0 1 32768	1 0 0 1 [山]          提S
							1 0 0		0 0 1 0               *
							1 0 0		1 1 0 0               S*
 品川 東海道新幹線　新横浜		1 0 0		1 0 0 0               *
 三島　東海道新幹線　静岡		1 0 0		0 0 0 0               *
 小田原　東海道新幹線　熱海		1 0 0		0 0 0 0               *
上野　東北新幹線 盛岡			-------
海尻 小海線 小海				------


S: 切り替え有効
提：株主優待適用可能表示
*: 株主優待適用



2018/3/21

小田原 熱海
0 1 0　　　0(1:NG)

品川 名古屋
0 1 0　　　1(0:NG)       最後の提案は1であるべきなのだが0でNG
0 1 1     0 優待券行使（OK)
0 0 1     0 OK

大高　川崎
0 1 0	0  メニュー提案してくるのがダメ

大高 神戸
0 1 0   0  メニュー提案してくるのがダメ

品川 四日市
0 1 0	1(0)NG
0 1 1	0 OK 優待券行使

桑園 岩見沢 長万部
0 1 0 	0 OK メニューで提案してくるのでNG

桑園 岩見沢
0 1 0 	0(1)NG

新谷 内子
0 0 0   0(1)NG

富士 富士宮
0 0 0	0(1)NG

岐阜羽島 米原
0 0 0   0(1)NG

大崎 品川 熱海
0 1 0	0(1)NG

1 0 0 あり得ない？
1 0 1　あり得ない
>>>>>
1 1 0 1 x


!!!!!!!!!!!!!!!!!!

!!!!!!!!!



city
BLF_JRTOKAISTOCK_ENABLE
BLF_JRTOKAISTOCK_APPLIED
suggestion



非適用だと都区内になっていないので株主優待表示なのに提案している
株主行使適用が効いていない。


tstring CalcRoute::showFare()
  FARE_INFO CalcRoute::calcFare()
    bool CalcRoute::checkJrEastTokai() /* JR東海以外 and JR東日本で新幹線でない場合false */    remove
     -> BLF_JREAST_IN_TOKAI on/off                                                        remove
        BLF_JRTOKAI_STOCK_APPLY off                                                       remove
    CalcRoute.checkOfRuleSpecificCoreLine()
        CalcRoute::CheckOfRule86()                                   vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv <-- remove
 	        else if ((city_no_s != 0) && (city_no_s != CITYNO_NAGOYA) && BIT_CHK(last_flag, BLF_JREAST_IN_TOKAI)) {
	        	/* "JR東海株主優待券使用"指定のときは適用条件可否適用 */
	        	r |= 0x80000000; // BIT_ON(last_flag, BLF_JRTOKAI_STOCK_APPLY); // for UI　　＝＝＝＞「提案可能フラグ」
	        	if (BIT_CHK(last_flag, BLF_JRTOKAI_STOCK)) { /* by user */   ======>「提案適用フラグ」
	        		city_no_s = 0;
	        	}
	        }
	    CheckOfRule86()の直下
	    if (BIT_CHK(chk, 31)) {
	    	BIT_ON(last_flag, BLF_JRTOKAI_STOCK_APPLY); // for UI        setFareOption で適用時ONする　　　＝＝＝＞「提案可能フラグ」
	    }
	    else {
	    	BIT_OFF(last_flag, BLF_JRTOKAI_STOCK_APPLY); // for UI                                      ＝＝＝＞「提案可能フラグ」
	    }
	    ======>
		checkJrEastTokai()は削除

		/* 山手線内発着 enable */
		if ((MASK(BLF_JREAST_IN_TOKAI) | MASK(BLF_JRTOKAISTOCK_APPLIED)) !=
			(last_flag & (MASK(BLF_JREAST_IN_TOKAI) | MASK(BLF_JRTOKAISTOCK_APPLIED)))) {

			last_flag &= ~LF_TER_CITY_MASK;
			last_flag |= ((rtky & 0x03) << BLF_TER_BEGIN_YAMATE);	// BLF_TER_BEGIN_YAMATE, BLF_TER_FIN_YAMATE
			TRACE("applied for rule87\n");
		}


    FARE_INFO::calc_fare()
      FARE_INFO::aggregate_fare_info()
        FARE_INFO::getDistanceEx() ********************* companymask
      ======>
	  aggregate_fare_inf() call 直後に
	    if checkJrEastTokai()をリネームした処理が有効  -> checkIsJRTokai
	      if CheckOfRule86で設定したフラグ「提案可能フラグ」が無効の場合、
		    companynmaskをJR東海単独に
		   else
			「提案可能フラグ」をON
		    if UI指定の「株主適用フラグ」がON
			  companynmaskをJR東海単独に.
　          else
              nothing


  fare_info.getFareStockDiscount()
    FARE_INFO::getStockDiscountCompany()
	    if ((JR_GROUP_MASK & companymask) == (1 << (JR_EAST - 1))) {
	    	return JR_EAST;
	    }
		:
        /＊ [名]以外の[都][区]内または[横]が適用されていたらJR東海ではない＊
        /* Route::CheckOfRule86() */
        if (((STATION_ID_AS_CITYNO < beginTerminalId) &&
             (CITYNO_NAGOYA != (beginTerminalId - STATION_ID_AS_CITYNO)))|
             ((STATION_ID_AS_CITYNO < endTerminalId) &&
              (CITYNO_NAGOYA != (endTerminalId - STATION_ID_AS_CITYNO)))) {
          return 0;


// showFare()の最後
if (BIT_CHK(last_flag, BLF_JREAST_IN_TOKAI) &&
    (fare_info.getStockDiscountCompany() != JR_CENTRAL)) {
    sResult += _T("\r\nJR東海株主優待券使用オプション選択可");
}
=====>
  「提案可能フラグ」？　かつ ！「提案適用フラグ」
  　　株主優待選択可の表示

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
提案可能フラグ
  BLF_JRTOKAISTOCK_ENABLE  (BLF_JRTOKAI_STOCK_APPLY)
  東海道新幹線で[区][山][浜][京][阪]が適用する場面でセットされる
  JR東海株主優待適用・非適用選択メニューが有効となる
提案適用フラグ
  BLF_JRTOKAISTOCK_APPLIED （BLF_JRTOKAI_STOCK）
  UI側からユーザが指定する
＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊
品川 小田原 Sになるが、Aでよし
使用行使しても効かず





他のフラグはトル

companymaskをみて株優判定判断

RouteList::getFareOption()
	// JR東海株主 有無 bit 4-5
	if (BIT_CHK(last_flag, BLF_JREAST_IN_TOKAI)) {                    ===>「提案可能フラグ」
		if (BIT_CHK(last_flag, BLF_JRTOKAI_STOCK)) {                  ===>「提案適用フラグ」
			rc |= (1 << 9);     // 0x200 : Enable
		}
		else {
			rc |= (1 << 8);		// default: Disable 0x100
		}
	}

CalcRoute::getFareOption()
	// JR東海株主 有無 bit 4-5
	if ((0 != (0x300 & rc)) /*&& BIT_CHK(last_flag, BLF_NO_RULE)*/) {
		if (!BIT_CHK(last_flag, BLF_JRTOKAI_STOCK_APPLY)) {          ＝＝＝＞「提案可能フラグ」
			rc &= ~0x300;
		}
	}

RouteList::setFareOption()
	/* JR東海株主適用有無 */
	if (0 != (FAREOPT_AVAIL_APPLIED_JRTOKAI_STOCK & availbit)) {
		if (FAREOPT_JRTOKAI_STOCK_APPLIED == (FAREOPT_JRTOKAI_STOCK_APPLIED & cooked)) {
			BIT_ON(last_flag,  BLF_JRTOKAI_STOCK);    /* 適用 */     　＝＝＝＞「提案適用フラグ」
		} else {
			BIT_OFF(last_flag,  BLF_JRTOKAI_STOCK);   /* 非適用 */　　　＝＝＝＞「提案適用フラグ」
		}
	}


BLF_JREAST_IN_TOKAI -> S to U     -> Is Suggestion -> ＝＝＝＞ remove
BLF_JRTOKAI_STOCK -> U to S       ->　　　　　　　　　　　 ＝＝＝＞「提案可能フラグ」BLF_JRTOKAISTOCK_ENABLE
BLF_JRTOKAI_STOCK_APPLY -> Inner  -> Suggestion Enable　＝＝＝＞「提案適用フラグ」BLF_JRTOKAISTOCK_APPLIED

・・・・・・・・・・・・



経路の全区間で、
発着ともJR東海駅ではないか、
発駅がJR東海でも境界駅でもない
着駅がJR東海でも境界駅でもない
とFalse



//////////////////////////////////////////////////////////////////////
showFare()の戻り値

uint32_t RouteList::getFareOption()
計算結果より指定可能なフラグオプションの情報を返す
 bit6 on: start only
 bit7   : empty
 bit1:0 : 大阪環状線1回通過
 bit5:4 : 特例適用されていて非適用指定されている
 bit4   : 特例適用されていて非適用されていない(規定)
 bit1   : 発 都区市内発着(名阪)
 bit0   : 着 都区市内発着(名阪)

uint32_t CalcRoute::getFareOption()
 	uint32_t rc = RouteList::getFareOption();
　　 return if empty or start

void RouteList::setFareOption(uint16_t cooked, uint16_t availbit)
Rule適用か
京阪線着駅指定単駅か市内駅か

JR東海　
フラグ一つ返す（上記のbit
小倉博多の設定　




2014-12-11
iOS側で使用するメソッドリスト

- RouteDataController:
    initWithAssign(イニシャライザ) route.assign(route&)

- ResultView(entity)
  routeScript
  showFare
  autoRoute
  addRoute
  resetStartStation resetRoute removeAll()
  lastStationId lastRouteItemStationId route->routeList().back().stationId
  startStationId startStationId startStationId()
  calcFare

- MainView(edit route)
  getRouteCount
  removeTail
  calcFare
  resetStartStation
  reverseRoute
  autoRoute
  setupRoute
  startStationId
  getRouteItem
  addRoute
  lastLineId
  routeScript



2014-11-3
sflg 13-15 reserve
のうち13を使用 「BCBULARB:新幹線利用も含む近郊区間フラグ」として使用
米原、京都、新大阪、相生、西明石
新神戸-新大阪、新神戸-西明石はNGなので、新大阪-西明石はNGとなるようにしなければならない。
発駅、着駅のみで判定すると、東海道新幹線と山陽新幹線でわかれているから良いものの、新大阪-西明石はNGなのOKとなる。


2013-12-9
-―――――――――――
GIT コミット後のログ
-――――――――――
2014-2-6
DB新幹線、西小倉、吉塚を分岐駅に指定

2014-2-3
showFare()不完全経路を追加

2014-1-26
 albdp.cpp - getBsrjctSpType() query invalid statement '%d% -> '?'
 getBsrjctSpType() I/F変更AttrOfStationOnLineLine()で得たlflgの下位8ビットは
 sflgのものであるから正しくない。
 TODO: test_result.txt 結果の確認
 TODO: jb21はadd()ではxではない。showFareでYETフラグ見て未完成であることを
 しめさなければならない。
 TODO: 長岡廻りの実装

2014-1-22
  フラグビット23-16がOffにしており、新幹線乗換フラグ(b19-20)がロストしてしまっていた。
  AttrOfStationOnLineLine()修正で対応

2014-1-3　コミット

2013-12-20
Excel修正
	b29ONの定義
	最終カラム(20カラム)に、路線1分岐駅1路線2乗換駅を定義。それぞれ、jctsp_line_id1, jctsp_station_id1, jctsp_line_id2, jctsp_station_id2 となる
	                                                                  上越線　　　　　　浦佐              未定義          宮内
	を上記の順番に'/'で区切り、並べる
	jctsp_line_id2はb31の日田彦山線ケースでのみ使用なので未定義

	鹿児島線-西小倉は///だけ入れる
	20カラムが空または、!なら未定義それ以外は、b29をONとする


DB修正
DBスクリプト修正
	t_jctspcl.type列追加
	b29追加
	b29のt_jcpspclのレコード追加(レコード構造変更修正も含む)

DBのb29:BSRJCTSP_B

alpdb.cpp:
b30:BSRNOTYETの実装
b31:BSRJCTHORD の定義追加
フローと箇条書き仕様書の実装(宮内-長岡廻りと、福岡県廻りの2件の計3件)

2013-12-19 (commit complete)
フラグの定義を大幅に仕様変更
小倉-西小倉回り
宮内-長岡回りの仕様追加と修正

-――――――――――


lflg
31 分岐特例駅		x
30 常に0、1はDB読エラー	o
29 69条区間開始駅	o Query_a69listで使用
28 69条区間開始駅	o 同上 読出では不要
27 新幹線		o 新幹線乗換判定で使用
26 新幹線		o
25 新幹線		o
24 -
23 会社線		△
22 新幹線内分岐駅	・
21 会社境界駅
20-17 69で使用DB読時は0
16-13 新幹線並行在来ID GetHZLine()で使用(新幹線のみ)DB読み込み時は不要
0-12 station.cflg
add()でセット時は、0x1fffでMaskするため0-12までのみ使用


- 88条
CheckOfRule88j()

(a)
　　　　　新大阪
東海道線　(神戸)
山陽線    XXXX
 :          :

*XXXXは、山陽線、神戸から姫路までの距離以上にあること
新大阪、東海道線、山陽線をチェックすれば、(神戸)は神戸でしかありえない。
|
V
　　　　　大阪
東海道線　(神戸)
山陽線    XXXX
 :          :
に置き換え

(b)
 :
          XXXX
山陽線    (神戸)
東海道線　新大阪

*XXXXは、山陽線、神戸から姫路までの距離以上にあること
新大阪、東海道線、山陽線をチェックすれば、(神戸)は神戸でしかありえない。
|
V
 :
          XXXX
山陽線    (神戸)
東海道線　大阪
に置き換え

(c)
            大阪
(東海道線)  新大阪
山陽新幹線  YYYY
 :
*大阪、新大阪、山陽新幹線をチェックすれば、(東海道線)は自明
YYYYは山陽新幹線に新大阪からの距離が姫路以遠であること
|
v
            新大阪
山陽新幹線  YYYY
に置き換え
ではなく、
            大阪
東海道線    神戸       *1
山陽線      西明石     *1
山陽新幹線  YYYY
に置き換え

*1に追加フラグとして経由表示しないを追加
他に計算除外をフラグも設ける

(d)
 :
?????        YYYY
山陽新幹線   新大阪
(東海道線)   大阪

*大阪、新大阪、山陽新幹線をチェックすれば、(東海道線)は自明
YYYYは山陽新幹線に新大阪からの距離が姫路以遠であること
|
V
 :
?????        YYYY
山陽新幹線   新大阪
ではなく、
            大阪
東海道線    神戸       *1
山陽線      西明石     *1
山陽新幹線  YYYY
に置き換え

*1に追加フラグとして経由表示しないを追加
他に計算除外をフラグも設ける？





- 運賃計算構成


c: show_route() をshow_fare()の中にいれる

showFare:
	checkOfRuleSpecificCoreLine(void); // route_list_raw -> route_list_cooked
	86,87適用の発着表示
	fare_info.calc_fare(route_list_raw);
	fare_info.fare に金額



showFare() の処理要約
	- checkOfRuleSpecificCoreLine() /* 86, 87, 69, 70条 114条適用かチェック */
	- 114条適用されていたら1行目にその場合の運賃額を表示する
	- route_list_cookedが空でないと規則適用と判断し都区市内発着表示を
	     - route_list_cookedに対してcalc_fare()
	- route_list_cookedが空の場合規則非適用と判断し
	     - route_list_rawに対してcalc_fare()
	- fare_infoの運賃を表示
	-
	-
	-
下関-岩国
経由：山陽線
営業キロ： 182.0 km 計算キロ： 182.0 km
運賃：\3,260     \2,600[2割引] \3,260[周割] \6,520[往復] \1,950[4割引]
有効日数：   2日

下関-岩国
経由：山陽線<櫛ヶ浜>岩徳線
営業キロ： 182.0 km 計算キロ： 182.0 km
運賃：\3,260     \2,600[2割引] \3,260[周割] \6,520[往復] \1,950[4割引]
有効日数：   2日

fare_info.calc_fare:
	FARE_INFO::aggregate_fare_info(ite->lineId, station_id1, ite->stationId)) {
		FARE_INFO::CheckSpecficFarePass(line_id, station_id1, station_id2);	// 特別加算区間（同一会社発着)
		FARE_INFO::Fare_company(station_id1, station_id2);			// 会社線
	FARE_INFO::days_ticket(this->sales_km);						// JRのみの営業キロで86,87適用後の距離で計算すべき
	FARE_INFO::SpecficFareLine(routeList.front().stationId, routeList.back().stationId);	// 特例運賃

	* {は、ノード毎 インデント内は各ノードに対していおこなわれる.



route.checkOfRuleSpecificCoreLine:  86、87条、69条判定＆経路算出 showFare()の最初に呼ばれる
	Route::CheckOfRule86(route_list_raw, &exit, &enter, &cityId);
	Route::reRouteRule86j87j(cityId, chk, exit, enter);
		Route::SpecificCoreAreaFirstTransferStationBy(exit.lineId, IDENT1(cityId));
		Route::Retrieve_SpecificCoreStation(IDENT1(cityId));
		Route::SpecificCoreAreaFirstTransferStationBy(enter.lineId, IDENT2(cityId));
		Route::Retrieve_SpecificCoreStation(IDENT2(cityId));
	Route::ReRouteRule70j(route_list_raw, &route_list_cooked)
	Route::reRouteRule69j(route_tmp);			/* 69条適用(route_tmp->route_list_cooked) */
	Route::CheckOfRule87(route_list_raw);
	Route::CheckOfRule88j(&route_list_cooked);
	Route::CheckOfRule114j(route_list_raw, route_list_cooked, rtky & 0x03 | 0x8000);
	Route::reRouteRule86j87j(cityId, 2, exit, enter);
	Route::reRouteRule69j(route_tmp);			/* 69条適用(route_tmp->route_list_cooked) */
	Route::reRouteRule86j87j(cityId, 1, exit, enter);
	Route::reRouteRule69j(route_tmp);			/* 69条適用(route_tmp->route_list_cooked) */
	Route::CheckOfRule88j(&route_list_cooked);
	Route::CheckOfRule114j(route_list_raw, route_list_cooked, chk & 0x03);







----------------------------------------------------------------

// 往復割引 1割引き 端数切り捨て 10190 → 9170

#if 0
利用区間に新下関～博多間を含む場合は、新幹線と在来線とでは運賃が異なります。
この例の場合の運賃計算は次のとおりです。
ゆきは新幹線利用で本州内幹線の運賃を適用し、運算計算キロは1179.3kmで13,440円。
片道1割引で12,090円。かえりは在来線利用で博多～東京間の運賃計算キロは1179.3kmで
「本州3社内の幹線の普通運賃表」を適用した13,440円にJR九州利用分（博多～下関間79km）の
加算額150円を加え、13,590円。片道1割引で12,230円になります。
往復割引運賃は12,090円＋12,230円＝24,320円です。


#endif

// デバック----------------------------------------------------------------

#if 0	// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  計算キロ220km～で、都区市内適用されていない場合、114条を試みる？
					Route::CheckOfRule114j(route, route_new, rtky & 0x03 | 0x8000)

	if (1900 < sales_km) {
		Route::CheckOfRule114j(route, route_new, rtky & 0x03 | 0x8000);
	}

	長津田-国母の例
	国母は横浜から200
